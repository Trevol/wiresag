- пробрасывать zoom из карты во viewModel
   - getLatitudeSpanDouble() / getLongitudeSpanDouble()
- как-то показать ближайший пролет, его длину и расстояние от текущей локации до ближайшего пролета
    - рисовать нормаль (с точками) для ближайшего пролета
       - показывать замеры от текущего положения и до 1) нормали 2) опор

- показывать всякие замеры (при определенном зуме)
   - отбражать в пределах определенного удаления до объектов
   - ближайший пролет (более массивной линией) и расстояние до него (до центра пролета и до его опор)
   - расстояние до нормали к пролету
   - это можно отключить (чекбоксом)

- создание опоры без пролета
- удаление опоры
- удаление/создание пролета

+++ хранить ссылки на изображение (id, uuid), изображение открывать из диалога аннотации
    - suspend load???
    - WireSagAnnotationTool.imageById  -  make suspend!!!!
    - WireSagAnnotationTool: val transform - use default param value
        - LayeredImage.transform = rememberMutableState(...)

- вызов suspend-функций из click-обработчика - как?

- где в интерфейсе показывать настройки (например: каталог, где сохраняются отснятые изображения)

- сохранять location и направление (азимут??) в метаданных снимка опоры

- удаление опоры
   - если нет фотографий соотв. пролета
   - tap -> переход в подробности -> удалить

- много перерисовок (ПОЛНЫХ - т.е. всех данных) происходит (при изменении состояния, при манипуляциях с картой: поворот, перетаскивание, зум)
    - при изменении состояния рисование выполняется 2 раза
            - 1й раз в результате CanvasOverlay.evaluateDrawDependencies() в Canvas-заглушку
            - 2й раз - это уже "боевая" отрисовка в ответ на postInvalidate()
        - Варианты оптимизации:
            а) 1 раз рисовать в bitmap, который потом рисовать в ответ на postInvalidate()
            б) 1-ю прорисовку выполнять в NoOpDrawScope(NoOpCanvas) - выполнить замер времени 1й и 2й прорисовок
    - можно ли как-то кэшировать результаты прорисовки?
        - или debounce/throttle?
    - или над картой "повесить" compose.Canvas - и в нем уже рисовать? Как получать текущий Projection карты?
        - обработка событий (обработка по месту/передача на карту) - onSingleTapConfirmed, onLongPress

- учитывать (и компенсировать поворотом) ориентацию снимка (угол поворота сенсора - 0, 90, 180, 270)

- при открытии изображения подбирать масштаб (scale) таким образом - что бы изображение полностью просматривалось

- разметка провода в неск. точек - т.к. не всегда понятно где самая нижняя часть - а так можно примерно рассчитать
- double click в режиме разметки изображения пролета делает zoom в месте "щелчка"
- кнопки -/+ - zoom в середине экрана

- угол обзора камеры
   - замерить
   - расчитать геометрически
   - можно ли получить параметры камеры программно?

- обрабатывать состояние геолокации (выключено при запуске, включено/включено после запуска приложения)
    - получает ли приложение местоположение при активации приложения (сворачивание и разворачивание)

- кэшировать карту
- Кнопка для перехода на текущее положение

- из разных ракурсов и расстояний от пролета надо получать примерно одинаковые провисания
- если съемка ведется НЕ с нормали к середине пролета???
- какое искажение вносит камера?
    - как оценить? google "калибровка камеры"
    -

- расчет провисания:
    - дано:
        - реальное расстояние (метры) между опорами - L
        - расстояние в пикселах между опорами - lp
        - провис в пикселах - sadPx
    - найти:
        - реальный провис (метры) - S
        - угол провиса - a

- карту реализовать, используя Compose-подход
    - Layers {....}
         - Layer1
         - Layer2
    - в слое
       - реализовать вариант прорисовки - используя Compose-подход - декларируя графические примитивы
       - onClick и проч. события




- как определять пролет? Пока это опоры в порядке добавления...
     - надо ли две опоры явно фиксировать как пролет??

- how to increase gps accuracy

+++ поворот устройства без пересоздания activity
+++ start/stop consume events
+++ convert degrees to degrees/minutes/seconds  (copy from netmarkup_app)


+++ Отображать на карте места, где была выполнена съемка
  +++ по клику открывать диалог аннотации (соответсвенно с возможностью удаления)

+++ сохранение в хранилище (в файл), загрузка из хранилища при старте приложения

+++ переход к параметрической форме представления уравнения прямой - т.к.